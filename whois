#!/usr/bin/env perl

use strict;
use warnings qw(all);

(my $progname = $0) =~ s=.*/==;

my @re =
  (# generic
   qr|\s*\(?https?://(?:www.)?icann.org/epp#\S+|,
   qr=^>>> =m,
   qr= <<<$=m,
   qr=URL of the ICANN WHOIS Data Problem.*?\n=i,
   qr=URL of the ICANN Whois Inaccuracy.*?\n=i,
   qr=(?:NOTICE|TERMS OF USE).*?at any time( without notice)?.\n=si,
   qr=(?:NOTICE|TERMS OF USE).*?abide by (?:these terms|this policy).\n=si,
   qr=NOTICE:.*?for this registration.\n=si,
   qr="?For more information on Whois status codes.*?\n=i,
   qr=The Data in the.*?DOMAIN AVAILABILITY.\n=si,  # tucows is longer
   qr=The Data in.*?abide by (?:these terms|this policy).\n=si, # than this
   qr=Register \S+ domain (?:name|now) at .*?\n=s,
   qr=Domains - cheap, easy, and secure at .*?\n=s,

   # Ignore fields which have no useful info
   qr=^.*?: REDACTED FOR PRIVACY\n=m,
   qr=^.*?: Registration Private\n=m,
   qr=^.*?: Not Available From Registry\n=m,
   qr=^.*?: GDPR Masked\n=m,

   # NSI/Verisign (whois.networksolutions.com), internic.net
   qr=Get a FREE domain.*?http://www.networksolutions.com\n=s,
   qr=The Registry database contains ONLY .*? domains and[ \n]Registrars.?=,

   # whois.tucows.com / opensrs
   qr=\s*This company may be contacted.*?questions.\n=s,

   # Match labels with blank values, unless that label is RSP.
   # By inserting SKIP dynamically into the regexp for just that label,
   # it won't match.
   qr=^(.*?)(?(?{ $1 eq "Registration Service Provider" })SKIP):\n=m,

   qr=The ARIN Registration Services Host.*?NIPRNET Information.\n=s,
   qr=#\n# ARIN WHOIS.*?Numbers, Ltd.\n#\n=s,

   # nic.fr
   qr=.*www.nic.fr/info/whois/dbcopyright.html\n=s,
   qr=^%%(?:\s.+|)\n=m,

   # whois.dotster.com
   qr=The data contained in.*?limitations of warranty.\n=s,

   # whois.educause.net
   qr=\nThis Registry database contains ONLY..*?-----\n=s,

   # whois.pir.org
   qr=Terms of Use: Access to Public Interest Registry WHOIS.*?\n=i,
   qr=^.*?: Please query the RDDS service.*?\n=m,

   # whois.squarespace.domains
   qr=Please register your domains.*?abide by this policy.\n=si,
   qr=https://www.icann.org/resources/.*?\n=,
   qr=^.*?: Contact Privacy Inc. Customer \d+\n=m,
   # Elide registrar address+phone
   qr=^(\S+) Street: 96 Mowat Ave\n\1 City: Toronto\n\1 State/Province: ON\n\1 Postal Code: M4K 3K1\n\1 Country: CA\n\1 Phone: \+1.4165385487\n=m,

   # whois.namesilo.com
   qr=^(\S+) Street: 1928 E. Highland Ave. Ste F104 PMB# 255\n\1 City: Phoenix\n\1 State/Province: AZ\n\1 Postal Code: 85016\n\1 Country: US\n\1 Phone: \+1.3478717726\n\1 Email: pw-[0-9a-f]+\@privacyguardian.org\n=m,

   # whois.godaddy.com
   qr=^(\S+) Street: DomainsByProxy.com\n\1 Street: 2155 E Warner Rd\n\1 City: Tempe\n\1 State/Province: Arizona\n\1 Postal Code: 85284\n\1 Country: US\n\1 Phone: \+1.4806242599\n\1 Email: Select.*?\n=m,

   #whois.markmonitor.com
   qr=If you wish to contact.*?----\n=s,
   qr=^.*?: Select Request Email Form.*?\n=m,

   # whois.corporatedomains.com
   qr=Corporation Service Company.*?cscglobal.com\n=s,

  );

sub whois
{
  my $prog = $ENV{WHOIS} || $progname;
  my @cmd = ($prog eq $progname
             ? ('run-next', $0)
             : $prog);

  open( my $fh, "-|", @cmd, @_ ) or die "exec: @cmd: $!\n";
  local $/ = undef;
  return <$fh>;
}

sub main
{
  my $buf = whois( @_ ) or die "$progname: No data\n";

  $buf =~ s/\s*?\n/\n/sg;   # normalize line endings and strip trailing ws
  map { $buf =~ s/$_//g } @re;
  $buf =~ s/(-\d\d)T(\d\d:)/$1 $2/g;  # make iso8601 more readable
  $buf =~ s/\n{3,}/\n\n/g;  # allow up to 1 blank line
  $buf =~ s/^\s+//;         # leading ws at start of output
  $buf =~ s/\s+$/\n/;       # remove trailing ws and extra newlines at end.

  print $buf;
}

main( @ARGV );

# eof
